#!/bin/bash

log_info() {
    echo -e "\033[1;32m[info] $* \033[0m"
}

log_err() {
  echo -e "\033[1;31m[error] $* \033[0m"
  exit 1
}

log_warn() {
  echo -e "\033[1;33m[warn] $* \033[0m"
}

my_sed () {
  case $(uname) in
    Darwin) sed -l "$@";; # mac/bsd sed: -l buffers on line boundaries
    *)      sed -u "$@";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
  esac
}

my_sha1sum () {
  case $(uname) in
    Darwin) shasum "$@";;
    *)      sha1sum -u "$@";;
  esac
}

header() {
  echo "-----> $*"
}

indent() {
  my_sed 's/^/       /'
}

if [[ -f .env ]]; then
  for e in $(grep -v '^#' .env); do eval "export $e"; done
fi

function template {
    FILE=`mktemp`; # Let the shell create a temporary file
    trap 'rm -f $FILE' 0 1 2 3 15;   # Clean up the temporary file

    (
    echo 'cat <<END_OF_TEXT'
    cat "$1"
    echo 'END_OF_TEXT'
    ) > $FILE
    . $FILE
}

function git_last_commit {
    git log -n 1 --pretty=format:%H $1
}

function has_changed {
    hash="$(git_last_commit $1)"
    test -z "${hash}" || [[ "${hash}" == "${LAST_COMMIT}" ]]
}

function get_version {
  my_sha1sum "$@" | my_sha1sum | cut -c 1-8
}
